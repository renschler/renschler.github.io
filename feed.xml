<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Renschler</title>
    <description>Patrick Renschler&apos;s blog
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Jul 2025 01:36:22 -0700</pubDate>
    <lastBuildDate>Thu, 10 Jul 2025 01:36:22 -0700</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>eShiftMetrics: electronic shifting gear usage</title>
        <description>&lt;p&gt;Earlier this year I built up a Santa Cruz Stigmata gravel bike with SRAM AXS electronic shifting (it’s sweet, will have to do a separate write up).&lt;/p&gt;

&lt;p&gt;The eletronic shifters are ANT+ compatible so they can communicate with your bike computer and tell it what gear you are in. This data gets written to your activity recording and then SRAM has a cool webapp where you can review your gear usage post-ride.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/images/sram1.png&quot; alt=&quot;SRAM gear usage chart&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/images/sram2.png&quot; alt=&quot;SRAM gear analysis&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;But it’s another place you have to look, and it requires you to send &lt;em&gt;all&lt;/em&gt; of your Garmin activities to SRAM.&lt;/p&gt;

&lt;p&gt;I decided to whip up a Connect IQ datafield that would provide similar gear usage analytics but let me review the data in Garmin - where I’m already looking after my rides. The usage stats are calculated on device during the ride and then written to the activity recording in &lt;a href=&quot;https://developer.garmin.com/fit/cookbook/developer-data/&quot;&gt;developer fit fields&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was planning on using Garmin’s monetization program to try and sell a premium version, but unfortunately their monetization program is &lt;em&gt;not&lt;/em&gt; compatible with cycling computers (the main target device for my datafield) so I used Stripe and built my own licensing system.&lt;/p&gt;

&lt;p&gt;Here’s the stack:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect IQ datafield (monkey c)&lt;/li&gt;
  &lt;li&gt;Payments &amp;amp; license distribution (stripe + aws lambda + aws ses + aws dynamodb)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eshiftmetrics.com&quot;&gt;Documentation site&lt;/a&gt; (eleventy.js on cloudflare pages)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The app was approved today and should be live soon in the &lt;a href=&quot;https://apps.garmin.com/apps/b3637cd4-9ba8-405e-9e26-ec9d62c980f9&quot;&gt;Connect IQ store!&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/1Vdd_Rx2zR0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 07 Jul 2025 00:00:00 -0700</pubDate>
        <link>/2025/07/07/eshiftmetrics-garmin-connect-iq-datafield.html</link>
        <guid isPermaLink="true">/2025/07/07/eshiftmetrics-garmin-connect-iq-datafield.html</guid>
        
        <category>cycling</category>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>Sliding bike hooks garage storage</title>
        <description>&lt;p&gt;I recently setup a sliding hook system for our garage bicycle wall.&lt;/p&gt;

&lt;p&gt;We used to have hooks mounted directly into the wall but it wasn’t always easy to remove the bike you wanted.&lt;/p&gt;

&lt;p&gt;I like this setup more because it’s easy to make space when I want to grab a specific bike or put one back.&lt;/p&gt;

&lt;div style=&quot;display: flex; gap: 10px; margin-bottom: 20px;&quot;&gt;
  &lt;div style=&quot;flex: 1;&quot;&gt;
    &lt;img src=&quot;/images/hooks1.jpeg&quot; alt=&quot;Bike hooks view 1&quot; style=&quot;width: 100%;&quot; /&gt;
  &lt;/div&gt;
  &lt;div style=&quot;flex: 1;&quot;&gt;
    &lt;img src=&quot;/images/hooks2.jpeg&quot; alt=&quot;Bike hooks view 2&quot; style=&quot;width: 100%;&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;parts&quot;&gt;Parts:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;hooks from &lt;a href=&quot;https://shop.gear-blocks.com/&quot;&gt;gear-blocks&lt;/a&gt; they work with standard 1-5/8” strut that hardware stores have (&lt;em&gt;see updates at end&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;12GA 10ft strut 1-5/8” &lt;a href=&quot;https://www.homedepot.com/p/NEWHOUSE-ELECTRIC-12-Gauge-1-5-8-in-x-10-ft-Strut-Channel-Silver-SC12-10-EG/320422816&quot;&gt;home depot&lt;/a&gt;; only used 5ft of it&lt;/li&gt;
  &lt;li&gt;4x heavy duty shelf hangers; 16in x 10in &lt;a href=&quot;https://www.homedepot.com/p/Everbilt-16-in-x-10-in-White-Heavy-Duty-Shelf-Bracket-14826/202895664&quot;&gt;home depot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bolts/nuts/washers to mount hangers to wall and to mount strut to hangers
    &lt;ul&gt;
      &lt;li&gt;for each hanger-to-strut:
        &lt;ul&gt;
          &lt;li&gt;1x: 3/8” × 1” hex bolt&lt;/li&gt;
          &lt;li&gt;2x: 3/8” fender washers (&amp;gt;1” outer diameter)&lt;/li&gt;
          &lt;li&gt;1x: 3/8” nylock nut&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;for each hanger-to-stud (w/ 3 holes per hanger)
        &lt;ul&gt;
          &lt;li&gt;3x: 1/4” x 3” lag screws (I was mounting through 3/4” plywood into studs, you might need different lengths depending on your setup)&lt;/li&gt;
          &lt;li&gt;3x: 1/4” fender washers (&amp;gt;1” outer diameter)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-updates-20250606-&quot;&gt;** Updates 2025/06/06 **&lt;/h3&gt;

&lt;p&gt;It’s only been a few months since I set things up and the lining on the swivel hooks from GearBlocks are already failing, so my rims are resting directly on metal.&lt;/p&gt;

&lt;p&gt;I reached out to GearBlocks and they offered to send me some 1/2” ID PVC tubing to provide a more durable cushion. They also offered to replace the hooks after seeing the blog post.&lt;/p&gt;

&lt;div style=&quot;display: flex; gap: 10px; margin-bottom: 20px;&quot;&gt;
  &lt;div style=&quot;flex: 1;&quot;&gt;
    &lt;img src=&quot;/images/hook_fail.jpg&quot; alt=&quot;Bike hooks with peeling cushion&quot; style=&quot;width: 100%;&quot; /&gt;
  &lt;/div&gt;
  &lt;div style=&quot;flex: 1;&quot;&gt;
    &lt;img src=&quot;/images/hook_extra_cushion.png&quot; alt=&quot;Bike hook wrapped with tubing&quot; style=&quot;width: 100%;&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;inspiration&quot;&gt;Inspiration:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://shop.gear-blocks.com/about-the-ultimate-unistrut-sliding-hook-bike-storage-rack/&quot;&gt;gear blocks guide&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/_ufYDG6LLYo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/_deob4L4AEY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 21 Mar 2025 00:00:00 -0700</pubDate>
        <link>/2025/03/21/sliding-bike-hooks-garage-storage.html</link>
        <guid isPermaLink="true">/2025/03/21/sliding-bike-hooks-garage-storage.html</guid>
        
        <category>home</category>
        
        <category>cycling</category>
        
        
      </item>
    
      <item>
        <title>DidDogEat? Dashbutton to Raspberry Pi to Slack</title>
        <description>&lt;p&gt;Amazon dash buttons are wifi connected devices that you are supposed to configure with your prime account so you can order a preselected product at the click of the button.&lt;/p&gt;

&lt;p&gt;It turns out the internet has found &lt;a href=&quot;https://www.google.com/search?q=dash+button+hack&quot;&gt;many ways&lt;/a&gt; to repurpose them for IoT projects.&lt;/p&gt;

&lt;p&gt;Normally dash buttons sell for $5 (which gets refunded after your first purchase), but on prime day last week they were selling for 99 cents so I decided to buy a few to play around with.&lt;/p&gt;

&lt;p&gt;This post covers how I setup a dashbutton, raspberry pi, and slack app to keep track of the dog getting fed.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/xa-Q7N8yGsQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And this is George. He is a good boy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/George.gif&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-i-used&quot;&gt;What I used&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi Zero W (&lt;a href=&quot;https://www.adafruit.com/product/3400&quot;&gt;$10&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;SanDisk Ultra 32GB microSD (&lt;a href=&quot;http://amzn.to/2ud6ZvU&quot;&gt;$12.99&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Dash-Buttons/b?ie=UTF8&amp;amp;node=10667898011&quot;&gt;Amazon dash button&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;MicroUSB power supply&lt;/li&gt;
  &lt;li&gt;Laptop running macOS Sierra&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kind of expensive for a button project, but I have a couple apps, like this &lt;a href=&quot;http://ec2-54-69-226-237.us-west-2.compute.amazonaws.com/&quot;&gt;flight checkin app&lt;/a&gt;, running on an aws t2.nano instance that I should be able to move to the pi.&lt;/p&gt;

&lt;p&gt;Also, I didn’t get a case but these &lt;a href=&quot;https://www.indiegogo.com/projects/pi-zero-ali-keychain--2#/&quot;&gt;aluminum keychain ones&lt;/a&gt; look sweet.&lt;/p&gt;

&lt;h3 id=&quot;raspberry-pi-zero-w-setup&quot;&gt;Raspberry Pi Zero W setup&lt;/h3&gt;

&lt;p&gt;First I followed the instructions here: &lt;a href=&quot;https://learn.adafruit.com/adafruit-raspberry-pi-lesson-1-preparing-and-sd-card-for-your-raspberry-pi&quot;&gt;Preparing an SD Card for your Raspberry Pi&lt;/a&gt;. You’ll have some options, I chose to go with the &lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;Raspian Jessie Lite image&lt;/a&gt; because I don’t need the desktop functionality and no way I was choosing the image called “NOOBS”.&lt;/p&gt;

&lt;p&gt;To flash the image onto my SD card, I broke away from the adafruit instructions and &lt;a href=&quot;https://computers.tutsplus.com/articles/how-to-flash-an-sd-card-for-raspberry-pi--mac-53600&quot;&gt;used these&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Make sure the micro SD adapter toggle is set to the unlocked position when you put it into your machine. Also as a heads up the dd command took ~20 minutes to finish, so it probably would have been faster and safer to just download the &lt;a href=&quot;https://etcher.io/&quot;&gt;etcher software&lt;/a&gt; and do what adafruit recommends…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next I moved onto the instructions starting here: &lt;a href=&quot;https://learn.adafruit.com/raspberry-pi-zero-creation/text-file-editing&quot;&gt;Raspberry Pi Zero Headless Quick Start Text File Editing&lt;/a&gt;. Once I was able to SSH in, I changed the default password and then ran the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;## contents from setup_script_1.sh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;emacs &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set up git, modify for yourself&lt;/span&gt;

git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;Patrick Renschler&quot;&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email myemail@email.com
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; core.editor emacs
git config &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# clone rest of setup commands from my public repo&lt;/span&gt;

git clone https://github.com/renschler/dash_setups.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;dash_setups

&lt;span class=&quot;c&quot;&gt;# run rest of setup commands&lt;/span&gt;

./pi_setup_script_2.sh

&lt;span class=&quot;c&quot;&gt;# run the setup commands for this dash button project&lt;/span&gt;

./dash_button_setup.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The scripts will install git, install emacs (a text editor), change various environment settings, and then install the python libraries you need for this project. You can review all the code here: &lt;a href=&quot;https://github.com/renschler/dash_setups&quot;&gt;https://github.com/renschler/dash_setups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t care for emacs you can comment out those lines. If you want to check it out &lt;a href=&quot;https://github.com/renschler/dash_setups/blob/master/COS%20217%20Emacs%20Cheat%20Sheet.pdf&quot;&gt;here’s the emacs tutorial&lt;/a&gt; I used to get started in college. It provides documentation for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.emacs&lt;/code&gt; file included in my setups repository.&lt;/p&gt;

&lt;p&gt;Lastly I added the following line to my laptop’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;, I use this convention for connecting to other machines that have harder to remember ssh commands.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# pi zero ssh&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;pi-z-ssh&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;ssh pi@raspberrypi.local&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dash-button-setup&quot;&gt;Dash button setup&lt;/h3&gt;

&lt;p&gt;There’s two things you need to do here: get the MAC address of your button, and then configure it for your home wifi network.&lt;/p&gt;

&lt;p&gt;Press the dash button and hold it down until the blue light comes on. On your laptop or phone, look for a wifi network named “Amazon ConfigureMe” and then join it. Open up a browser and go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.0.1&lt;/code&gt;. This should show you a page that has your button’s MAC address which you’ll need to write down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/MAC_ADDRESS.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The easiest way (only way? lol) to set up your dash button on your home wifi is to use the amazon mobile app. Sign into your amazon account, then open the menu from the top left and click “Your Account”.&lt;/p&gt;

&lt;p&gt;Scroll down to “Dash Buttons &amp;amp; Devices”, and click the “Set up a new device” option.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Select_Device.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Follow the instructions to set up your dash button but &lt;span style=&quot;color:red&quot;&gt;&lt;strong&gt;do not select a product&lt;/strong&gt;&lt;/span&gt;. Click the X in the top right and exit the setup before choosing what product you want to order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Exit_Setup.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tcpdump&quot;&gt;Tcpdump&lt;/h3&gt;

&lt;p&gt;Ok assuming your amazon dash button and raspberry pi are connected to the same wifi network, we can use tcpdump to listen for your button being pushed.&lt;/p&gt;

&lt;p&gt;SSH back into your pi, and run this command substituting in the MAC address of your dash button.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Modify with the mac address of your dash button&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcpdump ether host b4:7c:9c:3a:00:d4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Click your dash button and you should see some packets! Hit CTRL-C to stop tcpdump.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tcpdump.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks like everytime we click the dash button it broadcasts a DHCP packet, so we can use that as our trigger.&lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;

&lt;p&gt;Now we will use the python library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scapy&lt;/code&gt; to listen for the click of your dash button (like tcpdump), and then print “Hello world” when it is detected.&lt;/p&gt;

&lt;p&gt;Create a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashbutton.py&lt;/code&gt; and paste this into it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;feed_dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# substitute in your mac address
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4:7c:9c:3a:00:d4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashdict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4:7c:9c:3a:00:d4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dhcp_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DHCP packet from: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sniff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dhcp_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haslayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Start the program with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo python dashbutton.py&lt;/code&gt;, click your button, you should get a Hello, World!&lt;/p&gt;

&lt;h3 id=&quot;adding-slack&quot;&gt;Adding slack&lt;/h3&gt;

&lt;p&gt;The last step to this project is integrating slack’s python library so that when we detect a button press we can post a message to the #dogfood channel saying the dog was fed.&lt;/p&gt;

&lt;p&gt;If you don’t have a slack team yet, you’ll need to &lt;a href=&quot;https://slack.com/create&quot;&gt;make one&lt;/a&gt;. Next, sign into your team and go to the &lt;a href=&quot;https://api.slack.com/slack-apps&quot;&gt;building slack apps page&lt;/a&gt;. Click the green “Create a Slack App” button. When you get to the ‘Basic Information’ page, click the Permissions tile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/BasicInformation.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then scroll down to ‘Permission Scopes’, add the “Send messages as [APP_NAME]” permission, and save changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/PermissionScopes.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the same page, at the top, click the green button that says “Install App to Team”. When you’ve finished that you’ll land on the page with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OAuth Access Token&lt;/code&gt; displayed. You will need this to send messages from our python program.&lt;/p&gt;

&lt;p&gt;Reopen the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashbutton.py&lt;/code&gt; program, and modify it so that it matches what’s below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scapy.all&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; \&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slackclient&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackClient&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;slack_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SLACK_BOT_TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slack_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;feed_dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;chat.postMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#dogfood&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The dog just got food! :tada:&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# substitute in your mac address
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4:7c:9c:3a:00:d4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashdict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b4:7c:9c:3a:00:d4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feed_dog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dhcp_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DHCP packet from: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dashdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sniff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dhcp_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lfilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;haslayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ether&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dashset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Assuming you have a channel named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#dogfood&lt;/code&gt;, you can start this program with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PASTE-IN-YOUR-TOKEN&quot;&lt;/span&gt; python dashbutton.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When you click the dash button you should see a message show up from your app in the #dogfood channel!&lt;/p&gt;

&lt;p&gt;The very last thing I did was schedule a cron job that will start this program everytime the raspberry pi reboots.&lt;/p&gt;

&lt;p&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crontab -e&lt;/code&gt; into the terminal, and then add the following line, as it’s own line, at the bottom of the file. Do not preface it with a #.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;@reboot &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PASTE-IN-YOUR-TOKEN&quot;&lt;/span&gt; python dashbutton.py&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then leave one empty line below that command, before the end of the file, and you are good to exit. Although, depending on where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashbutton.py&lt;/code&gt; file is located on your pi, you may have to change that command so it has the right path.&lt;/p&gt;

&lt;p&gt;But ya that’s it! If you ever want to support more dash buttons on your network, you can add additional functions and MAC Addresses to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashdict&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dashset&lt;/code&gt; objects.&lt;/p&gt;

&lt;h3 id=&quot;related-but-different&quot;&gt;Related but different&lt;/h3&gt;

&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@ecaron/why-i-stopped-hacking-the-amazon-dash-button-and-learned-to-solder-84386a38bbd1&quot;&gt;Why I stopped hacking the amazon dash button and learned how to solder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackster.io/noelportugal/ifttt-smart-button-e11841&quot;&gt;IFTTT Smart Button&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.stavros.io/posts/emergency-food-button/?print&quot;&gt;Emergency Food Button&lt;/a&gt;:
    &lt;blockquote&gt;
      &lt;p&gt;From the first time I saw the Amazon dash button, I was impressed by its simplicity, and thought that it, or something like it at around the same price point, would be very useful. Unfortunately, it’s not open at all, and the more open alternatives are still not very open and cost at least seven times as much. Therefore, the reasonable thing for me to do is to sink a few thousand dollars’ worth of my time into making one myself!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;alexa-skills&quot;&gt;Alexa skills&lt;/h4&gt;

&lt;p&gt;I also checked out making an Alexa skill instead of connecting with slack. I went through the &lt;a href=&quot;https://developer.amazon.com/alexa-skills-kit/alexa-skill-quick-start-tutorial&quot;&gt;quick start tutorial&lt;/a&gt;, but my takeway was that the platform is too restrictive in terms of how you have to summon your skill.&lt;/p&gt;

&lt;p&gt;Take my dog food app as an example. I wanted to make a skill so that anyone in house could just be like “Alexa, did the dog eat?”, “Alexa, did someone feed the dog?”, “Alexa, has the dog had dinner?”… If Alexa has my skill installed, it should know to use my skill to answer those questions. Instead you have to give your skill a trigger name like “Dog App”, and then people would have to say something like, “Alexa ask Dog App if the dog ate”, or “Alexa open Dog App”, or just “Alexa, Dog App”. People need to remember what the app is called, which is bad UX. It’s fine when your skill is brand related; everyone will remember that to hail an uber you have to say the word uber. But for smart home style questions, it seems very limiting.&lt;/p&gt;

&lt;p&gt;When you build your skill, you provide all the possible use phrases, the ones that I mentioned earlier, like “did the dog eat” or “when did the dog eat” and you map these to a specific intent which your program can use to decide what to execute and return. So your skill effectively creates a mapping of ‘things that can be asked’ to ‘operations that should be performed or information that should be provided’, but it’s conditional on being triggered by the app name. I assume that was done to avoid the issue of having conflicts between different skills. Or maybe Amazon wants to keep control over these coloquial queries, and eventually release some Amazon-only smart home solution. I don’t know.&lt;/p&gt;

&lt;p&gt;I tried to game it, but still wasn’t satisfied. Your skill name can only be 3 words or less, so I tried “did thedog eat”. Then when I said “Alexa, did the dog eat?”, my app was triggered. But you lose the flexibility of having multiple detection phrases, so everyone still has to remember to say “did the dog eat” and not one of the other ways to ask…&lt;/p&gt;

&lt;p&gt;Anyways, this is what I gathered from the quick start tutorial and like 20 min of reading the docs. So I thought it would be easier for my family to just check a slack channel when they wanted to know if the dog was fed.&lt;/p&gt;

&lt;h3 id=&quot;thanks-for-reading&quot;&gt;Thanks for reading!&lt;/h3&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 00:00:00 -0700</pubDate>
        <link>/2017/07/21/DigDogEat-Dashbutton-Raspberry-Pi-Slack-Hack.html</link>
        <guid isPermaLink="true">/2017/07/21/DigDogEat-Dashbutton-Raspberry-Pi-Slack-Hack.html</guid>
        
        <category>projects</category>
        
        <category>IoT</category>
        
        <category>raspberry</category>
        
        <category>archive</category>
        
        
      </item>
    
      <item>
        <title>Blog Setup: Jekyll + Github Pages</title>
        <description>&lt;p&gt;My blog is back up and running. Here are some notes. The &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll documentation&lt;/a&gt; is probably a better reference.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;

&lt;p&gt;I followed the instructions here: &lt;a href=&quot;https://help.github.com/articles/setting-up-your-github-pages-site-locally-with-jekyll/&quot;&gt;setting up your GitHub Pages site locally with Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;layout-and-style&quot;&gt;Layout and Style&lt;/h3&gt;

&lt;p&gt;I wanted to make some tweaks to the minima theme so I followed the instructions here on &lt;a href=&quot;http://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;overriding theme defaults&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;plugins&quot;&gt;Plugins&lt;/h3&gt;

&lt;p&gt;I wanted to use a plugin that would automatically generate a page for each tag where I could see all the posts that had been assigned that tag. Github pages &lt;a href=&quot;https://help.github.com/articles/adding-jekyll-plugins-to-a-github-pages-site/&quot;&gt;does not support many plugins&lt;/a&gt; (&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/325&quot;&gt;more on that&lt;/a&gt;) but you can get around this issue by building your site locally and only pushing the static files. To do that I followed the instructions here: &lt;a href=&quot;http://charliepark.org/jekyll-with-plugins/&quot;&gt;Jekyll + Plugins + Github + You&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then I went ahead and &lt;a href=&quot;http://charliepark.org/tags-in-jekyll/&quot;&gt;installed the tagging plugin&lt;/a&gt;. In order for it to work, I had to remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group: :jekyll_plugins&lt;/code&gt; from my Gemfile (&lt;a href=&quot;https://jekyllrb.com/docs/plugins/#installing-a-plugin&quot;&gt;see “installing a plugin” Jekyll docs&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I also wanted to be able to embed youtube clips into my posts, so I used this plugin: &lt;a href=&quot;https://github.com/pibby/jekyll-youtube&quot;&gt;jekyll-youtube&lt;/a&gt;. Again you won’t have issues with Github’s plugin restrictions if you take the “build locally” approach mentioned above. I also found a solution that lets you &lt;a href=&quot;http://www.adamwadeharris.com/how-to-easily-embed-youtube-videos-in-jekyll-sites-without-a-plugin/&quot;&gt;embed youtube videos in jekyll without a plugin&lt;/a&gt; but didn’t use it because I had already done it the other way.&lt;/p&gt;

&lt;p&gt;I haven’t done this yet, but I’d like to check out &lt;a href=&quot;https://cwoebker.com/posts/latex-math-magic&quot;&gt;using latex in jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;p&gt;Here’s what I added to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;, you’ll need to change it for your directory structure. It assumes you are using the set up described in &lt;a href=&quot;http://charliepark.org/jekyll-with-plugins/&quot;&gt;Jekyll + Plugins + Github + You&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;########## jekyll blog aliases / functions #################&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;open -a &quot;Sublime Text 2&quot;&apos;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a new draft function&lt;/span&gt;

new_draft &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Documents/Blog/jekyll/renschler.github.io.raw&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;drafts/&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.md&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;---
layout: post
title: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
date: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
comments: true
tags:

- draft
  ---&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;drafts/&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.md&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    st _drafts/&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;-&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.md&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a new draft&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;draft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new_draft&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#Usage: draft TitleOfPost&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# preview blog with drafts&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;previewB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cd ~/Documents/Blog/jekyll/renschler.github.io.raw; jekyll build --drafts; jekyll serve --drafts&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# push latest blog&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;publishB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cd ~/Documents/Blog/jekyll/renschler.github.io.raw; jekyll build;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p -r &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;site/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ~/Documents/Blog/jekyll/renschler.github.io;cd ~/Documents/Blog/jekyll/renschler.github.io;git add .;git commit -am &apos;Latest build.&apos;;git push&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 17 Jul 2017 00:00:00 -0700</pubDate>
        <link>/2017/07/17/Blog-Setup-Jekyll-Github-Pages.html</link>
        <guid isPermaLink="true">/2017/07/17/Blog-Setup-Jekyll-Github-Pages.html</guid>
        
        <category>blog</category>
        
        <category>workflow</category>
        
        <category>archive</category>
        
        
      </item>
    
      <item>
        <title>Glomp Attack: a rails app for sending GIFs</title>
        <description>&lt;p&gt;** Update (1/1/17): Glomp Attack is no longer operating.&lt;/p&gt;

&lt;p&gt;I was brainstorming small business ideas when I stumbled on &lt;a href=&quot;https://goatattack.com/&quot;&gt;GoatAttack.com&lt;/a&gt;. It’s a website where you can pay 79 cents to have pictures of goats text messaged to your friends. It’s a simple site that apparently made several thousand in revenue. Ok sign me up.&lt;/p&gt;

&lt;p&gt;I partnered with &lt;a href=&quot;https://twitter.com/tommygibbons46&quot;&gt;Tommy&lt;/a&gt; and soon &lt;a href=&quot;https://www.glompattack.com/?utm_source=prblog&amp;amp;utm_medium=post&amp;amp;utm_campaign=prblog&quot;&gt;GlompAttack.com&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.glompattack.com/?utm_source=prblog&amp;amp;utm_medium=post&amp;amp;utm_campaign=prblog&quot;&gt;&lt;img src=&quot;/images/glompAttack.PNG&quot; alt=&quot;Photo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For 79 cents you can send your friends pictures of hugs! Actually it’s better than pictures because they are gifs! The website is a rails app running on heroku. Message sending is powered by Twilio and payments are processed by Braintree.&lt;/p&gt;

&lt;p&gt;Unfortunately, it’s not that funny, and it hasn’t paid for itself (yet). To quote some guy on &lt;a href=&quot;https://redd.it/3q6jkp&quot;&gt;r/shutupandtakemymoney&lt;/a&gt;: “This is so fucking stupid. Good luck catching some idiots with this service.”&lt;/p&gt;

&lt;p&gt;For the record it wasn’t a total flop. We sent it to our Moms and they liked it.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Oct 2015 00:00:00 -0700</pubDate>
        <link>/2015/10/26/Glomp-Attack-rails-app-for-sending-gifs.html</link>
        <guid isPermaLink="true">/2015/10/26/Glomp-Attack-rails-app-for-sending-gifs.html</guid>
        
        <category>projects</category>
        
        <category>rails</category>
        
        <category>twilio</category>
        
        <category>archive</category>
        
        
      </item>
    
      <item>
        <title>Hail Yeah NYC: an iOS app for finding cabs</title>
        <description>&lt;p&gt;** Update (1/28/17): This app is no longer available in the app store.&lt;/p&gt;

&lt;p&gt;In November I competed at &lt;a href=&quot;http://challengepost.com/software/hail-yeah&quot;&gt;Hack Princeton&lt;/a&gt; with my teammates &lt;a href=&quot;http://www.hillwyrough.com/&quot;&gt;Hill&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/tommygibbons46&quot;&gt;Tommy&lt;/a&gt;. We developed an iPhone application that provides users a map of the best nearby intersections to hail a cab in Manhattan. It took home 2nd place in the software track and won the ‘Best Use of MongoDB’ award. Over the holiday break I cleaned up the UI and submitted it to the app store and now it’s live - &lt;a href=&quot;https://itunes.apple.com/us/app/hail-yeah-nyc/id956423920?mt=8&quot;&gt;Hail Yeah!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the video of me pitching Hail Yeah at the hackathon.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/5yrhWSTjThY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h3 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h3&gt;

&lt;p&gt;Our app uses a publicly available dataset describing the ~200 million taxi trips taken in and around Manhattan in 2013 [&lt;a href=&quot;http://www.andresmh.com/nyctaxitrips/&quot;&gt;Download link&lt;/a&gt;]. Thanks to the Freedom of Information Act, the NYC government and related authorities provided details of every taxi trip, including where it began, where it ended, when it took place, and even how much the rider tipped.&lt;/p&gt;

&lt;p&gt;First we bucketed the start location of these trips to their nearest intersections. Then for each intersection we broke down the trip totals by the day of the week and the time of day.&lt;/p&gt;

&lt;p&gt;When a user sets a location in our app, we use the historical information described above to calculate the frequency of taxi pickups for all intersections within a quarter mile radius of the user’s location given the current day of the week and time of day.&lt;/p&gt;

&lt;p&gt;The resulting information is presented as an intersection heat map, with a color scale at the top for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/hail-yeah-nyc/id956423920?mt=8&quot;&gt;&lt;img src=&quot;/images/Hail_Yeah_NYC.png&quot; alt=&quot;Photo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app was written in Objective C, it uses google maps, and our intersection database is hosted on Parse.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Jan 2015 00:00:00 -0800</pubDate>
        <link>/2015/01/26/Hail-Yeah-NYC-iOS-app-for-hailing-cabs.html</link>
        <guid isPermaLink="true">/2015/01/26/Hail-Yeah-NYC-iOS-app-for-hailing-cabs.html</guid>
        
        <category>iOS</category>
        
        <category>projects</category>
        
        <category>archive</category>
        
        
      </item>
    
      <item>
        <title>Visualizing distributed power control</title>
        <description>&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/63XOaXwKSwU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I was working through &lt;a href=&quot;http://www.amazon.com/gp/product/1107024943/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1107024943&amp;amp;linkCode=as2&amp;amp;tag=455note-20&amp;amp;linkId=GETAOF75SDVA3VO6&quot;&gt;M.Chiang’s Networked Life: 20 Questions and Answers&lt;/a&gt; which is an awesome textbook touching on a wide range of networks topics.&lt;/p&gt;

&lt;p&gt;The first chapter, “What makes CDMA work for my smartphone” covers mobile station &lt;a href=&quot;http://en.wikipedia.org/wiki/Power_control&quot;&gt;power control&lt;/a&gt; which plays a crucial role in communication systems in terms of interference management, energy management, and connectivity management. Power control helps address the &lt;a href=&quot;http://en.wikipedia.org/wiki/Near-far_problem&quot;&gt;near-far problem&lt;/a&gt; faced in non-orthogonal wireless systems like &lt;a href=&quot;http://en.wikipedia.org/wiki/Code_division_multiple_access&quot;&gt;CDMA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created a d3 visualization that lets you explore a basic formulation of the distributed power control algorithm (with a fixed signal to interference ratio) over a narrow range of inputs. You can play around with it on &lt;a href=&quot;http://bl.ocks.org/renschler/2aa319500f6ec57088ea&quot;&gt;bl.ocks.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each receiving channel is assigned a target SIR that is randomly sampled from a uniform distribution with range 1-3. Each mobile station is assigned an initial transmit power level that is randomly sampled from a uniform distribution with range 1-3mW. Gains for interference channels are randomly sampled from a uniform distribution with range 0.01-0.10. These inputs are displayed in tables where each row corresponds to a given mobile station. The input values used here are arbitrary and don’t reflect actual numerical values observed in real cellular networks.&lt;/p&gt;

&lt;p&gt;The transmit power of each mobile station is plotted as a line over time (i.e. over the DPC algorithm iterations). If there exists a set of transmit powers that satisfies all target SIRs, the minimal power solution is displayed in a table to the right of the input tables. Otherwise “&lt;span style=&quot;color:red&quot;&gt;No Solution&lt;/span&gt;” is displayed.&lt;/p&gt;

&lt;p&gt;Users can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;alter the seed for the random number generator (this will generate different inputs)&lt;/li&gt;
  &lt;li&gt;set the number of mobile stations (3-9)&lt;/li&gt;
  &lt;li&gt;set the receiver noise (0.1-0.5mW) which is assumed to be the same for all channels&lt;/li&gt;
  &lt;li&gt;set the number of iterations for the DPC algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Source Code: &lt;a href=&quot;https://gist.github.com/renschler/2aa319500f6ec57088ea&quot;&gt;gist.github.com/renschler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reference: M. Chiang, P. Hande, T. Lan, and C.W. Tan, “Power control for cellular networks”, &lt;em&gt;Foundation and Trends in Networking&lt;/em&gt;, vol. 2, no. 4, pp. 381-533, July 2008.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 -0700</pubDate>
        <link>/2014/10/26/Visualizing-distributed-power-control-d3.html</link>
        <guid isPermaLink="true">/2014/10/26/Visualizing-distributed-power-control-d3.html</guid>
        
        <category>d3</category>
        
        <category>networks</category>
        
        <category>projects</category>
        
        <category>archive</category>
        
        
      </item>
    
      <item>
        <title>Visualizing simulated commuter flows between US counties</title>
        <description>&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/9C4gU8o6_z0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;** Update (6/20/2017): Github now only allows access to 10 files per Gist, so you’ll need to &lt;a href=&quot;https://gist.github.com/renschler/906685a5f1b1972640e7&quot;&gt;clone the repository&lt;/a&gt; and open index.html in a browser to play with the d3 visualization.&lt;/p&gt;

&lt;p&gt;I created a d3 visualization to explore commuter flows between US counties that were produced by my implementation of &lt;a href=&quot;http://www.nature.com/nature/journal/v484/n7392/abs/nature10856.html&quot;&gt;Simini et al. (2012)’s&lt;/a&gt; radiation model. You can play around with it on &lt;a href=&quot;http://bl.ocks.org/renschler/906685a5f1b1972640e7&quot;&gt;bl.ocks.org&lt;/a&gt;. The selected county appears &lt;span style=&quot;color:red&quot;&gt;red&lt;/span&gt; and you can toggle between commuter flows into and out of the county.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Radiation_law_for_human_mobility&quot;&gt;Radiation models&lt;/a&gt;, have been shown to improve the accuracy of describing many processes (in addition to commuting) that are affected by mobility and transport including migration, trade, and communication.&lt;/p&gt;

&lt;p&gt;My radiation model used 2010 county level census data to generate inter-county commuter flows [&lt;a href=&quot;https://github.com/renschler/radiationmodel&quot;&gt;radiation model source code&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;Although there are limitations to the results it’s cool to see that this basic radiation model captures some long-distance movement patterns that other mobility predictors (like the &lt;a href=&quot;http://en.wikipedia.org/wiki/Gravity_model_of_trade&quot;&gt;gravity model&lt;/a&gt;) struggle with in the absence of data needed to fit parameters. For good examples check out Miami-Dade, Florida; Cook, Illinois; and Clark, Nevada.&lt;/p&gt;

&lt;p&gt;As a future project I’d be interested in applying a radiation model to investigate the dynamics of human mobility and disease transmission across nations where accurate mobility data is not always available.&lt;/p&gt;

&lt;p&gt;D3 Source Code: &lt;a href=&quot;https://gist.github.com/renschler/2aa319500f6ec57088ea&quot;&gt;gist.github.com/renschler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Radiation Model Source Code: &lt;a href=&quot;https://github.com/renschler/radiationmodel&quot;&gt;github.com/renschler/radiationmodel&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Sep 2014 00:00:00 -0700</pubDate>
        <link>/2014/09/14/Visualizing-US-County-Commuter-Flows-Radiation-Model-d3.html</link>
        <guid isPermaLink="true">/2014/09/14/Visualizing-US-County-Commuter-Flows-Radiation-Model-d3.html</guid>
        
        <category>d3</category>
        
        <category>projects</category>
        
        <category>archive</category>
        
        
      </item>
    
  </channel>
</rss>
